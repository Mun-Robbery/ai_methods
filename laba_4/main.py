from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters
)
from config import MODELS, TG_TOKEN
from keyboards import get_model_keyboard, remove_keyboard
from models import generate_response

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞:",
        reply_markup=get_model_keyboard()
    )

async def handle_model_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    model_name = update.message.text
    if model_name not in MODELS:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏
    context.user_data["model_config"] = MODELS[model_name]
    await update.message.reply_text(
        f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} –≤—ã–±—Ä–∞–Ω–∞!\n"
        f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n"
        f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {context.user_data['model_config']['parameters']['temperature']}\n"
        f"‚Ä¢ Top-K: {context.user_data['model_config']['parameters']['top_k']}\n"
        f"‚Ä¢ –®—Ç—Ä–∞—Ñ –ø–æ–≤—Ç–æ—Ä–æ–≤: {context.user_data['model_config']['parameters']['repetition_penalty']}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–ª–æ–≤–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∏—Ñ–º!",
        reply_markup=remove_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "model_config" not in context.user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ /start")
        return
    
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, 
        action="typing"
    )
    
    try:
        print(context.user_data["model_config"])
        response = await generate_response(
            model=context.user_data["model_config"],
            message=update.message.text
        )
        await update.message.reply_text(f"üéØ –†–∏—Ñ–º—ã –¥–ª—è —Å–ª–æ–≤–∞ '{update.message.text}':\n\n{response}")
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:",
            reply_markup=get_model_keyboard()
        )
        context.user_data.pop("model_config", None)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = ApplicationBuilder()\
        .token(TG_TOKEN)\
        .concurrent_updates(True)\
        .build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(
        MessageHandler(filters.Regex(f"^({'|'.join(MODELS.keys())})$"), handle_model_selection)
    )
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
